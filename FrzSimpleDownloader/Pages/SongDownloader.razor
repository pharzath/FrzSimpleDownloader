@page "/SongDownloader"
@using FrzSimpleDownloader.Services
@using Olive
@using System.Reflection.Emit

<MudCard Elevation="2">
	<MudCardHeader>
		Downlaod Pronunsiations
	</MudCardHeader>
	<MudCardContent>
		<MudStack Spacing="2">
			<MudProgressLinear @ref="progress" Min="0" Striped="true" Color="Color.Tertiary" Size="Size.Large"></MudProgressLinear>
			<MudText Typo="Typo.body1">
				@Title
			</MudText>
			<MudText>
				@Msg
			</MudText>
		</MudStack>
	</MudCardContent>
	<MudCardActions>
		<MudCheckBox @bind-Checked="CheckExistBefore" Label="Check Item Exist in bucket befor GET">

		</MudCheckBox>
		<MudButton Size="Size.Large" Color="Color.Error" OnClick="StartDownlaodClick">
			Download Songs
		</MudButton>
		@if (Running)
		{
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" OnClick="StopDownload">
				Stop
			</MudButton>

		}
	</MudCardActions>
</MudCard>

<MudText Typo="Typo.h4">
	@Content
</MudText>
@code {
	bool Running;
	string Content;

	/// <summary>
	///
	/// </summary>
	// https://music.cdn-wordup.com/Clips/#ID#.mp3
	// #ID# = 0001df27-e712-4065-8246-68abc3d3fa02
	// https://music.cdn-wordup.com/Clips/0001df27-e712-4065-8246-68abc3d3fa02.mp3

	public static string ToNameUrlKey(string name)
	{
		return name
			.OrEmpty()
			.Replace("_", "-")
			.Replace(" ", "-")
			.Replace("_", "-")
			.Where(x => x.IsLetterOrDigit() || x == '-')
			.ToString("")
			.KeepReplacing("--", "-")
			.ToLower();
	}

	MudProgressLinear? progress;
	[Inject] ArvanService Arvan { get; set; }

	string Title;
	string Msg;
	// URL of the text file containing video IDs
	//string textFileUrl = "https://vocavers.cdn-havesh.ir/Words-v19.txt";
	string url;

	string[] songs;
	int counter = 0;

	string fileCounter = "SongsCounter.txt";
	private int _section = 1;

	protected override async Task OnInitializedAsync()
	{
		songs = await GetSongs();
		progress.Max = songs.Length;
		PopulateTotals();

		await base.OnInitializedAsync();
	}

	private async Task<string[]> GetSongs()
	{
		using HttpClient httpClient = new HttpClient();
		// Download the text file
		var sectionUrl = $"https://vocavers.s3.ir-thr-at1.arvanstorage.ir/data/Songs.txt";
		var textFileContent = await httpClient.GetStringAsync(sectionUrl);

		return textFileContent
			.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
			.Select(x => x.ToLower())
			.ToArray();
	}

	private void PopulateTotals()
	{
		url = $"https://music.cdn-wordup.com/Clips/{{0}}.mp3";

		if (File.Exists(fileCounter))
		{
			var count = File.ReadAllText(fileCounter);
			counter = Convert.ToInt32(count);
		}
		else
		{
			counter = 0;
		}
		progress.Value = counter;

		Title =
			$"Total Downlaod :  {counter} of {songs.Length} ({Math.Round((double)((counter * 100) / songs.Length), 1)})%";
	}

	string GetQuoteKey(string quote)
	{
		quote = quote.OrEmpty().Replace("&apos;", "'").Remove("\r").Replace("\n", "\r\n");
		var key = quote.CreateSHA1Hash() + quote.CreateMD5Hash();
		key = new string(key.Where(v => v.IsLetterOrDigit()).ToArray());
		return key;
	}

	bool CheckExistBefore;
	private async Task StartDownlaodClick()
	{
		using var httpClient = new HttpClient();
		if (progress != null)
			progress.Max = songs.Length;
		Running = true;

		progress.Max = songs.Length;
		foreach (var songId in songs.Skip(counter))
		{
			if (Stop) break;
			
			var songUrl = string.Format(url, songId);


			// Download and save the quote voice file by Accent
			byte[] voiceBytes;
			try
			{
				if (CheckExistBefore)
				{
					var itemExist = await Arvan.ItemExist(ArvanService.BUCKET_NAME, "song", $"{songId}.mp3");
					if (itemExist)
					{
						Console.WriteLine("------------------------ Item Exists in Bucket");
						Msg = "Item Exists in Bucket";
						goto LabelEND;
					}
				}
				voiceBytes = await httpClient.GetByteArrayAsync(songUrl);
			}
			catch (Exception e)
			{
				var errFile = $"error-Songs.txt";
				await File.AppendAllLinesAsync(errFile, new[] { songId });

				Console.WriteLine("************ " + e.Message);
				goto LabelEND;
			}

			var voiceFileName = $"song/{songId}.mp3";
			Console.WriteLine($"Downloaded {voiceFileName}");

			//await File.WriteAllBytesAsync(videoFileName, videoBytes);
			Arvan.UploadByteArrayToS3(voiceBytes, ArvanService.BUCKET_NAME, voiceFileName);
			Msg = "Downloaded : " + voiceFileName;

		LabelEND:
			progress.Value = ++counter;
			Title = $"Total Downlaod :  {counter} of {this.songs.Length} ({Math.Round((double)((counter * 100) / this.songs.Length), 1)})%";

			StateHasChanged();

			await File.WriteAllTextAsync(fileCounter, counter.ToString());
			await Task.Delay(1);
		}

		Running = false;
		Stop = false;
	}


	bool Stop = false;
	private void StopDownload()
	{
		Stop = true;
	}

}
