@page "/QuoteVoiceDownloader"
@using FrzSimpleDownloader.Services
@using Olive

<MudCard Elevation="2">
	<MudCardHeader>
		Downlaod Pronunsiations
	</MudCardHeader>
	<MudCardContent>
		<MudSelect @bind-Value="Accent" Label="Select Accesnt">
			<MudSelectItem Value="@("us")">American</MudSelectItem>
			<MudSelectItem Value="@("gb")">British</MudSelectItem>
		</MudSelect>
		<MudNumericField @bind-Value="Section" Label="File Section" FullWidth="false"></MudNumericField> Of 25
		<MudStack Spacing="2">
			<MudProgressLinear @ref="progress" Min="0" Striped="true" Color="Color.Tertiary" Size="Size.Large"></MudProgressLinear>
			<MudText Typo="Typo.body1">
				@Title
			</MudText>
			<MudText>
				@Msg
			</MudText>
		</MudStack>
	</MudCardContent>
	<MudCardActions>
		<MudButton Size="Size.Large" Color="Color.Error" OnClick="StartDownlaodClick">
			Download Quote Voices
		</MudButton>
	</MudCardActions>
</MudCard>

@code {
	private string _accent = "us";
	string Accent
	{
		get => _accent;
		set
		{
			_accent = value;
			PopulateTotals(_accent, Section);
		}
	}

	MudProgressLinear? progress;
	[Inject] ArvanService Arvan { get; set; }

	string Title;
	string Msg;
	// URL of the text file containing video IDs
	//string textFileUrl = "https://vocavers.cdn-havesh.ir/Words-v19.txt";
	string url;

	string[] quotes;
	int counter = 0;

	string fileCounter;
	string fileCounterName = "Quote_{0}_{1}_Counter.txt";
	private int _section = 1;

	protected override async Task OnInitializedAsync()
	{
		quotes = await GetQuotesBySection(Section);
		progress.Max = quotes.Length;
		PopulateTotals(Accent, Section);

		await base.OnInitializedAsync();
	}

	private async Task<string[]> GetQuotesBySection(int section)
	{
		using HttpClient httpClient = new HttpClient();
		// Download the text file
		var sectionUrl = $"https://vocavers.s3.ir-thr-at1.arvanstorage.ir/data/QuotesText_{section}.txt";
		var textFileContent = await httpClient.GetStringAsync(sectionUrl);

		return textFileContent.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
	}

	private void PopulateTotals(string accent, int section)
	{
		url = $"https://speech.cdn-wordup.com/{accent}/{{0}}.mp3";
		fileCounter = fileCounterName.FormatWith(accent , section);
		// Split the text file content into quotes
		if (File.Exists(fileCounter))
		{
			var count = File.ReadAllText(fileCounter);
			counter = Convert.ToInt32(count);
		}
		else
		{
			counter = 0;
		}
		progress.Value = counter;

		Title =
			$"Total Downlaod :  {counter} of {quotes.Length} ({Math.Round((double)((counter * 100) / quotes.Length), 0)})%";
	}

	string GetQuoteKey(string quote)
	{
		quote = quote.OrEmpty().Replace("&apos;", "'").Remove("\r").Replace("\n", "\r\n");
		var key = quote.CreateSHA1Hash() + quote.CreateMD5Hash();
		key = new string(key.Where(v => v.IsLetterOrDigit()).ToArray());
		return key;
	}

	private async Task StartDownlaodClick()
	{
		using var httpClient = new HttpClient();
		if (progress != null)
			progress.Max = quotes.Length;
		for (var i = Section; i <= 25; i++)
		{
			if (i != Section)
				quotes = await GetQuotesBySection(i);
			progress.Max = quotes.Length;
			foreach (var quote in quotes.Skip(counter))
			{
				var key = GetQuoteKey(quote);
				var quoteLink = string.Format(url, key);


				// Download and save the quote voice file by Accent
				byte[] voiceBytes;
				try
				{
					voiceBytes = await httpClient.GetByteArrayAsync(quoteLink);

				}
				catch (Exception e)
				{
					var errFile = $"error-Quotes.txt";
					await File.AppendAllLinesAsync(errFile, new[] { quote });

					Console.WriteLine("************ " + e.Message);
					continue;
				}
				var voiceFileName = $"speach/{key}.mp3";
				Console.WriteLine($"Downloaded {voiceFileName}");

				//await File.WriteAllBytesAsync(videoFileName, videoBytes);
				Arvan.UploadByteArrayToS3(voiceBytes, ArvanService.BUCKET_NAME, voiceFileName);
				Console.WriteLine($"Uploaded {voiceFileName}");
				progress.Value = ++counter;

				Title = $"Total Downlaod :  {counter} of {this.quotes.Length} ({Math.Round((double)((counter * 100) / this.quotes.Length), 0)})%";
				Msg = "Downloaded : " + voiceFileName;

				StateHasChanged();

				await File.WriteAllTextAsync(fileCounter, counter.ToString());
				await Task.Delay(1);
			}
			counter = 0;
		}
	}

	public int Section
	{
		get => _section;
		set
		{
			_section = value;
			InvokeAsync(async () =>
			{
				quotes = await GetQuotesBySection(_section);
				PopulateTotals(Accent , _section);
				
				StateHasChanged();
			});
			

		}
	}

}
